#!/usr/bin/env bash
set -ex
pwd
ls ../data
# python -u run_capsule.py --input ../data/scan_00003_20230815_162233_iGluSnFR/scan_00003_20230815_162233/ --output ../results/test/ --writetiff True

# Define the ranges for motionAmp and brightness
motionAmp_values=(12.5 25 50 100 200)
brightness_values=(2 0.2 0.02 20 200)

# Base command
base_command="python -u run_capsule.py --writetiff True"

# Counter for test directories and SimDescription
counter=1

# Maximum number of parallel processes
max_parallel=10

# Output directory for results
output_dir="../results/"

# Create the output dÃŸirectory if it doesn't exist
mkdir -p "$output_dir"

# Initialize the CSV file
csv_file="${output_dir}parameters.csv"
echo "SimDescription,motionAmp,brightness" > "$csv_file"

# Function to run a command and save parameters to CSV
run_command() {
  local input_dir=$1
  local motionAmp=$2
  local brightness=$3
  local counter=$4
  local output_path="${output_dir}"
  
  # Create the output directory if it doesn't exist
  mkdir -p "$output_path"
  
  # Construct the full command
  local full_command="$base_command --input $input_dir --output $output_path --motionAmp $motionAmp --brightness $brightness --SimDescription $counter --numTrials 10"
  
  # Retry logic
  local max_retries=5
  local attempt=0
  local success=0
  
  while [ $attempt -lt $max_retries ]; do
    attempt=$((attempt + 1))
    echo "Attempt $attempt: Running: $full_command"
    
    # Run the command
    eval "$full_command" && success=1 && break
    
    # Check if the error is "Resource temporarily unavailable"
    if [ $? -ne 0 ]; then
      echo "Attempt $attempt failed. Retrying..."
      sleep 1  # Optional: wait for a second before retrying
    fi
  done
  
  if [ $success -eq 0 ]; then
    echo "Command failed after $max_retries attempts."
    exit 1
  fi
  
  # Append the parameters to the CSV file
  echo "$counter,$motionAmp,$brightness" >> "$csv_file"
}

# Get all subdirectories under ../data/iGluSnFR_testing-Adrian/
subdirs=$(find ../data/iGluSnFR_testing-Adrian/ -mindepth 1 -maxdepth 1 -type d)

# Loop through all combinations of motionAmp and brightness
for motionAmp in "${motionAmp_values[@]}"; do
  for brightness in "${brightness_values[@]}"; do
    for subdir in $subdirs; do
      # Run the command for each subdirectory
      run_command "$subdir" "$motionAmp" "$brightness" "$counter"
      
      # Increment the counter
      counter=$((counter + 1))
      
      # Check the number of background processes
      while [ "$(jobs -r | wc -l)" -ge "$max_parallel" ]; do
        # Wait for any background process to complete
        wait -n
      done
    done
  done
done

# Wait for all background processes to complete
wait
