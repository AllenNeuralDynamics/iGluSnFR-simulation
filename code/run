#!/usr/bin/env bash
set -ex
pwd
ls ../data
# python -u run_capsule.py -i ../data/Bergamo-zStacks/scan_00008-REF_Ch2.ome -o ../results/ --motionAmp 200 --brightness 0.04 --nsites 30 --SimDescription 740 --numTrials 1

# Define the ranges for motionAmp, brightness, and nsites
# motionAmp_values=(12.5 25 50 100 200)
# brightness_values=(2 0.2 0.02 20 200)
# nsites_values=(0 50)

# motionAmp_values=(0 12.5 50 200)
# brightness_values=(30 3 0.3 0.03)
# nsites_values=(0 10 50)

motionAmp_values=(0 25 50 100 200)
brightness_values=(0.04 0.2 1 4 20)
nsites_values=(10 30 50)

# motionAmp_values=(200) # Default setting
# brightness_values=(0.04) # Default setting
# nsites_values=(30) # Default setting

# Base command
base_command="python -u run_capsule.py --writetiff"

# Counter for test directories and SimDescription
counter=1

# Maximum number of parallel processes
max_parallel=8 # Adjust based on your system's capabilities

# Output directory for results
output_dir="../results/"

# Create the output directory if it doesn't exist
mkdir -p "$output_dir"

# Initialize the CSV file
csv_file="${output_dir}parameters.csv"
echo "SimDescription,motionAmp,brightness,nsites,scan" > "$csv_file"

# Pre-generate all CSV entries to avoid concurrent writes
for motionAmp in "${motionAmp_values[@]}"; do
  for brightness in "${brightness_values[@]}"; do
    for nsites in "${nsites_values[@]}"; do
      for subdir in $(find ../data/Bergamo-zStacks/ -maxdepth 1 -mindepth 1 -type d | sort); do
        echo "$counter,$motionAmp,$brightness,$nsites,$(basename $subdir)" >> "$csv_file"
        counter=$((counter + 1))
      done
    done
  done
done

# Reset counter for command execution
counter=1

# Function to run a command without modifying the CSV
run_command() {
  local input_dir=$1
  local motionAmp=$2
  local brightness=$3
  local nsites=$4
  local counter=$5
  local output_path="${output_dir}"
  
  # Create the output directory if it doesn't exist
  mkdir -p "$output_path"
  
  # Construct the full command
  local full_command="$base_command -i $input_dir -o $output_path --motionAmp $motionAmp --brightness $brightness --nsites $nsites --SimDescription $counter --numTrials 1"
  
  # Retry logic
  local max_retries=5 
  local attempt=0
  local success=0
  
  while [ $attempt -lt $max_retries ]; do
    attempt=$((attempt + 1))
    echo "Attempt $attempt: Running: $full_command"
    
    # Run the command
    eval "$full_command" && success=1 && break
    
    if [ $? -ne 0 ]; then
      echo "Attempt $attempt failed. Retrying..."
      sleep 1  # Optional: wait before retrying
    fi
  done
  
  if [ $success -eq 0 ]; then
    echo "Command failed after $max_retries attempts."
    exit 1
  fi
}

# Get all subdirectories
subdirs=$(find ../data/Bergamo-zStacks/ -maxdepth 1 -mindepth 1 -type d | sort)

# Loop through all combinations and execute commands in parallel
for motionAmp in "${motionAmp_values[@]}"; do
  for brightness in "${brightness_values[@]}"; do
    for nsites in "${nsites_values[@]}"; do
      for subdir in $subdirs; do
        run_command "$subdir" "$motionAmp" "$brightness" "$nsites" "$counter" &
        
        # Increment the counter
        counter=$((counter + 1))

        # Control parallel processes
        while [ "$(jobs -r | wc -l)" -ge "$max_parallel" ]; do
          wait -n
        done

        # Small delay to maintain order (optional)
        sleep 0.05
      done
    done
  done
done

# Wait for all background processes to complete
wait